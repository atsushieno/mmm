
#Begin lexer rules

// 2.3
Input: 
	InputSection.opt 
InputSection: 
	InputSectionPart 
	InputSection  InputSectionPart 
InputSectionPart: 
	InputElements.opt  NewLine 
InputElements: 
	InputElement 
	InputElements InputElement 
InputElement: 
	Whitespace 
//	Comment 
	Token 
NewLine: 
	NewLineCharacter 
	U+000D  U+000A 
NewLineCharacter: 
	U+000A  // Line Feed 
	U+000D  // Carriage Return 
	U+0085  // Next Line 
	U+2028  // Line Separator 
	U+2029  // Paragraph Separator 
//Comment: 
//	CommentDelimited 
//	CommentLine 
//	CommentDelimited: 
//	/*  CommentDelimitedContents.opt  */ 
//CommentDelimitedContent: 
//	none of  */ 
//CommentDelimitedContents: 
//	CommentDelimitedContent 
//	CommentDelimitedContents  CommentDelimitedContent 
//CommentLine: 
//	//  CommentLineContents.opt 
//CommentLineContent: none of 
//	NewLineCharacter 
//	CommentLineContents: 
//	CommentLineContent 
//	CommentLineContents  CommentLineContent 
Whitespace: 
	WhitespaceCharacters 
WhitespaceCharacter: 
	U+0009  // Horizontal Tab 
	U+000B  // Vertical Tab 
	U+000C  // Form Feed 
	U+0020  // Space 
	NewLineCharacter 
WhitespaceCharacters: 
	WhitespaceCharacter 
	WhitespaceCharacters  WhitespaceCharacter 

// 2.4
Token: 
	Identifier 
	Keyword 
	Literal 
	OperatorOrPunctuator 
Identifier: 
	IdentifierBegin  IdentifierCharacters.opt 
	IdentifierVerbatim 
IdentifierBegin: 
	_ 
	Letter 
IdentifierCharacter: 
	IdentifierBegin 
	$ 
	DecimalDigit 
IdentifierCharacters: 
	IdentifierCharacter 
	IdentifierCharacters  IdentifierCharacter 
IdentifierVerbatim: 
	@[  IdentifierVerbatimCharacters  ] 
IdentifierVerbatimCharacter: 
	none of ] 
	IdentifierVerbatimEscape 
	IdentifierVerbatimCharacters: 
	IdentifierVerbatimCharacter 
	IdentifierVerbatimCharacters  IdentifierVerbatimCharacter 
IdentifierVerbatimEscape: 
	\\ 
	\] 
Letter: 
	one of a..z  A..Z 
DecimalDigit: 
	one of 0..9 
DecimalDigits: 
	DecimalDigit 
	DecimalDigits  DecimalDigit 
Keyword: 
	any 
	accumulate 
	by 
	empty 
	equals 
	error 
	export 
	false 
	final 
	from 
	group 
	id 
	identity 
	import 
	in 
	interleave 
	join 
	language 
	labelof 
	left 
	let 
	module 
	null 
	precedence 
	right 
	select 
	syntax 
	token 
	true 
	type 
	unique 
	value  
	valuesof 
	where 
Literal: 
	DecimalLiteral 
	IntegerLiteral 
	ScientificLiteral 
	DateTimeLiteral 
	DateTimeOffsetLiteral 
	TimeLiteral 
	TextLiteral 
	BinaryLiteral  
	GuidLiteral  
	LogicalLiteral 
	NullLiteral 
DecimalLiteral: 
	IntegerLiteral  .  DecimalDigit  DecimalDigits 
IntegerLiteral: 
	DecimalDigits 
ScientificLiteral: 
	DecimalLiteral  e  Sign.opt  DecimalDigit  DecimalDigits.opt 
	DecimalLiteral  E  Sign.opt  DecimalDigit  DecimalDigits.opt 
Sign:
	one of +  - 
DateLiteral: 
	Sign.opt  DateYear  -  DateMonth  -  DateDay   
DateDay:
	one of  01  02  03  04  05  06  07  08  09  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31 
DateMonth:
	one of  01  02  03  04  05  06  07  08  09  10  11  12 
DateYear: 
	DecimalDigit  DecimalDigit  DecimalDigit  DecimalDigit 
DateTimeLiteral: 
	DateLiteral  T  TimeLiteral   
DateTimeOffsetLiteral: 
	DateLiteral  T  TimeLiteral TimeZoneLiteral 
TimeZoneLiteral: 
	Sign TimeHourMinute 
	Z  
//Sign: // LAMESPEC: duplicate definition
//	+ 
//	- 
TimeLiteral: 
	TimeHourMinute  :  TimeSecond   
TimeHourMinute: 
	TimeHour  :  TimeMinute 
TimeHour:
	one of  00  01  02  03  04  05  06  07  08  09  10  11 12  13  14  15  16  17  18  19  20  21  22  23 
TimeMinute: 
	0  DecimalDigit 
	1  DecimalDigit 
	2  DecimalDigit 
	3  DecimalDigit 
	4  DecimalDigit 
	5  DecimalDigit 
TimeSecond: 
	0  DecimalDigit  TimeSecondDecimalPart.opt 
	1  DecimalDigit  TimeSecondDecimalPart.opt 
	2  DecimalDigit  TimeSecondDecimalPart.opt 
	3  DecimalDigit  TimeSecondDecimalPart.opt 
	4  DecimalDigit  TimeSecondDecimalPart.opt 
	5  DecimalDigit  TimeSecondDecimalPart.opt 
	60  TimeSecondDecimalPart.opt 
TimeSecondDecimalPart: 
	.  DecimalDigits 
TextLiteral: 
	'  SingleQuotedCharacters  ' 
	"  DoubleQuotedCharacters  " 
	@ '  SingleQuotedVerbatimCharacters.opt  ' 
	@ "  DoubleQuotedVerbatimCharacters.opt  " 
SingleQuotedCharacters: 
	SingleQuotedCharacter 
	SingleQuotedCharacters SingleQuotedCharacter 
SingleQuotedCharacter: 
	SingleQuotedCharacterSimple 
	CharacterEscapeSimple 
	CharacterEscapeUnicode 
SingleQuotedCharacterSimple:
	none of ' \ NewLineCharacter 
 SingleQuotedVerbatimCharacters: 
	SingleQuotedVerbatimCharacter 
	SingleQuotedVerbatimCharacters  SingleQuotedVerbatimCharacter 
SingleQuotedVerbatimCharacter: 
	none of ' 
	SingleQuotedVerbatimCharacterEscape 
SingleQuotedVerbatimCharacterEscape: 
	" " 
 
DoubleQuotedCharacter:  
	DoubleQuotedCharacterSimple 
	CharacterEscape 
DoubleQuotedCharacters: 
	DoubleQuotedCharacter 
	DoubleQuotedCharacters DoubleQuotedCharacter 
DoubleQuotedCharacterSimple:
	none of  " \ NewLineCharacter 
DoubleQuotedVerbatimCharacter: 
	none of " 
	DoubleQuotedVerbatimCharacterEscape 
DoubleQuotedVerbatimCharacters: 
	DoubleQuotedVerbatimCharacter 
	DoubleQuotedVerbatimCharacters  DoubleQuotedVerbatimCharacter 
DoubleQuotedVerbatimCharacterEscape: 
	" " 
 
CharacterEscape: 
	CharacterEscapeSimple 
	CharacterEscapeUnicode 
CharacterEscapeSimple: 
	\  CharacterEscapeSimpleCharacter 
CharacterEscapeSimpleCharacter:
	one of '  "  \  0  a  b  f  n  r  t  v 
CharacterEscapeUnicode: 
	\u  HexDigit  HexDigit  HexDigit  HexDigit 
	\U  HexDigit  HexDigit  HexDigit  HexDigit HexDigit  HexDigit  HexDigit  HexDigit 
LogicalLiteral:
	one of true  false 
BinaryLiteral: 
	0x  HexDigits.opt 
	0X  HexDigits.opt 
HexDigit:
	one of GetHexDigitToken() // 0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f  A  B  C  M  E  F 
HexDigits: 
	HexDigit  HexDigit 
	HexDigits  HexDigit HexDigit 
NullLiteral: 
	null 
GuidLiteral: 
	#[ X X X X X X X X - X X X X - X X X X - X X X X - X X X X X X X X X X X X ] 
X:  
	HexDigit 
OperatorOrPunctuator: 
	one of  [  ]  (  )  .  ,  :  ;  ?  =  <  >  <=  >=  ==  !=  +  -  *  /  %  &  |  !  &&  ||  ~   <<  >> { } # .. @ ' " ?? 

#Begin tokenizer rules

// 3.
Identifiers: // LAMESPEC: while referenced often, there is no definition for "Identifiers"
	Identifier
	Identifiers , Identifier

Primary: 
	ReferencePrimary 
	TextLiteral 
	RepetitionPrimary 
	CharacterClassPrimary 
	InlineRulePrimary 
	AnyPrimary 
CharacterClassPrimary: 
	TextLiteral  ..  TextLiteral 
 ReferencePrimary: 
	GrammarReference 
GrammarReference: 
	Identifier 
	GrammarReference  .  Identifier 
	GrammarReference  .  Identifier  (  TypeArguments  ) 
	Identifier  (  TypeArguments  ) 
TypeArguments: 
	PrimaryExpression 
	TypeArguments  ,  PrimaryExpression 
RepetitionPrimary: 
	Primary Range 
	Primary CollectionRanges 
Range: 
	? 
	* 
	+ 
CollectionRanges: 
	#  IntegerLiteral 
	#  IntegerLiteral  ..  IntegerLiteral.opt 
InlineRulePrimary:
	(  ProductionDeclarations  ) 
AnyPrimary: // LAMESPEC: it is described as "Any"
	any 
TextPatternExpression: 
	Difference 
Difference: 
	Intersect 
	Difference  -  Intersect 
Intersect: 
	Inverse 
	Intersect  &  Inverse 
Inverse: 
	Primary 
	^  Primary 

// 4.
ProductionDeclaration: 
	ProductionPrecedence.opt PatternDeclaration Constructor.opt 
Constructor: // LAMESPEC: missing colon in the document
	=>  TermConstructor 
ProductionPrecedence: 
	precedence  IntegerLiteral  : 
PatternDeclaration:  
	empty 
	TermDeclarations.opt 
TermDeclarations: 
	TermDeclaration 
	TermDeclarations TermDeclaration 
TermDeclaration: 
	error 
	Attributes.opt TermPrecedence.opt VariableBinding.opt TextPatternExpression 
VariableBinding: 
	Name  : 
TermPrecedence: 
	left  (  IntegerLiteral  ) 
	right  (  IntegerLiteral  ) 
TermConstructor: 
	TopLevelNode 
Node: 
	Atom 
	OrderedTerm 
	UnorderedTerm 
TopLevelNode: 
	TopLevelAtom 
	OrderedTerm 
	UnorderedTerm 
Nodes: 
	Node 
	Nodes  ,  Node 
OrderedTerm: 
	Label.opt  [  Nodes.opt  ] 
UnorderedTerm: 
	Label.opt  {  Nodes.opt  } 
Label: 
	Identifier 
	id  (  Atom  ) 
Atom: 
	TopLevelAtom 
	valuesof  (  VariableReference  ) 
 
TopLevelAtom: 
	TextLiteral 
	DecimalLiteral 
	LogicalLiteral 
	IntegerLiteral 
	NullLiteral 
	VariableReference 
	labelof  (  VariableReference  ) 
 
VariableReference: 
	Identifier 

// 5.
RuleDeclaration: 
	Attributes.opt MemberModifier.opt Kind Name RuleParameters.opt RuleBody.opt  ; 
Kind: 
	token 
	syntax 
	interleave 
MemberModifier: 
	final 
RuleBody: 
	=  ProductionDeclarations 
ProductionDeclarations: 
	ProductionDeclaration 
	ProductionDeclarations  |  ProductionDeclaration 
RuleParameters: 
	(  RuleParameterList  )   
RuleParameterList: 
	RuleParameter 
	RuleParameterList  ,  RuleParameter 
RuleParameter: 
	Identifier 

// 6.
LanguageDeclaration: 
	Attributes.opt language Name LanguageBody 
LanguageBody: 
	{  RuleDeclarations.opt  } 
RuleDeclarations: 
	RuleDeclaration 
	RuleDeclarations RuleDeclaration 

// 7.
TypeDeclaration: 
	type  Identifier  ;   
	type  Identifier  InitializationExpression  ;.opt   
	type  Identifier  EntityTypeExpression  ;.opt  
	type  Identifier  EntityTypeExpression  where  WhereExpressions  ;  
	type  Identifier  :  Expression  ;   
	type  Identifier  :  TypeReferences  ;   
	type  Identifier  :  TypeReferences EntityTypeExpression  ;.opt   
	type  Identifier  :  TypeReferences EntityTypeExpression  where WhereExpressions; 
TypeAscription: // LAMESPEC: while referenced often, there is no definition for "TypeAscription"
	TypeReference
TypeReference: 
	QualifiedIdentifier   
TypeReferences: 
	TypeReference   
	TypeReferences  ,  TypeReference   
EntityTypeExpression: 
	{  EntityMemberDeclarations  }   
EntityMemberDeclarations: 
	EntityMemberDeclaration   
	EntityMemberDeclarations  EntityMemberDeclaration   
EntityMemberDeclaration: 
	FieldDeclaration   
	ComputedValueDeclaration   

// 8.
ComputedValueDeclaration: 
	Identifier FormalParameters ReturnType.opt ExpressionBody 
	extern Identifier FormalParameters ReturnType  ;  // LAMESPEC: mistyped as Identifer
FormalParameters: 
	( Parameters.opt ) 
Parameters: 
	Parameter 
	Parameters ,  Parameter 
Parameter: 
	Identifier TypeAscription.opt 
ReturnType: 
	TypeAscription 
ExpressionBody: 
	{ Expression ; } 
FieldDeclaration: 
	DottedIdentifier  TypeAscription.opt  =  Expression  ;  // LAMESPEC: mistyped as DottedIdentifer
	DottedIdentifier  TypeAscription.opt  InitializationExpression  ;.opt 
	DottedIdentifiers  TypeAscription.opt  ;  // ditto
	extern Identifier TypeAscription  ; 
DottedIdentifiers: 
	DottedIdentifier 
	DottedIdentifiers , DottedIdentifier 
DottedIdentifier:  // LAMESPEC: It is mistyped as DottedIdentifer.
	IdentifierPath 
	.  IdentifierPath 
IdentifierPath: 
	Identifier 
	IdentifierPath  .  Identifier 
MemberAccessExpression: 
	PrimaryExpression  .  MemberName   
MemberName: 
	Identifier   

// 9.
InitializationExpression: 
	{  ElementInitializers.opt  }   
	{  ElementInitializers  ,  }   
ElementInitializer: 
	LeadingDottedIdentifier TypeAscription.opt  =  Expression 
	LeadingDottedIdentifier TypeAscription.opt  InitializationExpression // LAMESPEC: mistyped as LeadingDottedIdentifer
ElementInitializers: 
	ElementInitializer   
	ElementInitializers  ,  ElementInitializer 
LeadingDottedIdentifier: 
	DottedIdentifier 
	.  DottedIdentifier   
InvocationExpression: 
	Identifier  InvocationExpressionArguments   
InvocationExpressionArguments: 
	(  Arguments.opt  )   
Arguments: 
	Argument   
	Arguments  ,  Argument   
Argument: 
	Expression   
PrimaryExpression: 
	PrimaryCreationExpression   
PrimaryCreationExpression: 
	Literal   
	SimpleName   
	ParenthesizedExpression   
	MemberAccessExpression   
	InvocationExpression   
	InitializationExpression   
	EntityTypeExpression 
	ContextVariable 
	InfoOfExpression  
Name: // LAMESPEC: while referenced often, there is no definition for "Name"
	SimpleName
SimpleName: 
	Identifier 
ParenthesizedExpression: 
	(   Expression   ) 
ContextVariable: // LAMESPEC: missing colon
	value 
InfoOfExpression: // LAMESPEC: it is defined as "InfoOfOperator"
	infoof ( DottedIdentifier )
UnaryExpression: 
	PrimaryExpression   
	+  PrimaryExpression   
	-  PrimaryExpression   
	!  PrimaryExpression   
	~  PrimaryExpression   
	PrimaryExpression  #   
	IdentityExpression   
	UniqueExpression   
IdentityExpression: 
	identity  Identifier   
	identity  (  Identifiers  )   
UniqueExpression: 
	unique  Identifier   
	unique  (  Identifiers  )   
MultiplicityExpression: 
	UnaryExpression   
	UnaryExpression  ?   
	UnaryExpression  +   
	UnaryExpression  *   
	UnaryExpression  #  IntegralRange   
IntegralRange: 
	IntegerLiteral   
	IntegerLiteral  ..   
	IntegerLiteral  ..  IntegerLiteral  
 
AdditiveExpression: 
	MultiplicativeExpression   
	AdditiveExpression  +  MultiplicativeExpression   
	AdditiveExpression  -  MultiplicativeExpression   
 
MultiplicativeExpression: 
	UnaryExpression   
	MultiplicativeExpression  *  MultiplicityExpression   
	MultiplicativeExpression  /  MultiplicityExpression   
	MultiplicativeExpression  %  MultiplicityExpression   

ShiftExpression: 
	AdditiveExpression   
	ShiftExpression  <<  AdditiveExpression   
	ShiftExpression  >>  AdditiveExpression   
RelationalExpression: 
	ShiftExpression   
	RelationalExpression  <  ShiftExpression   
	RelationalExpression  >  ShiftExpression   
	RelationalExpression  <=  ShiftExpression   
	RelationalExpression  >=  ShiftExpression   
	RelationalExpression  in  ShiftExpression   
	RelationalExpression  :  ShiftExpression   
EqualityExpression: 
	RelationalExpression   
	EqualityExpression  ==  RelationalExpression   
	EqualityExpression  !=  RelationalExpression   
LogicalAndExpression: 
	EqualityExpression   
	LogicalAndExpression  &&  EqualityExpression   
LogicalOrExpression: 
	LogicalAndExpression   
	LogicalOrExpression  ||  LogicalAndExpression 
NullCoalescingExpression: 
	LogicalOrExpression   
	LogicalOrExpression  ??  NullCoalescingExpression  
ConditionalExpression: 
	NullCoalescingExpression   
	NullCoalescingExpression  ?  Expression  :  Expression   
QueryExpression: 
	ConditionalExpression   
	QueryFromClause  QueryBody   
QueryBody: 
	QueryBodyClauses.opt  QueryConstructor  
QueryBodyClauses: 
	QueryBodyClause   
	QueryBodyClauses  QueryBodyClause   
QueryBodyClause: 
	QueryFromClause   
	QueryLetClause   
	QueryWhereClause   
	QueryJoinClause   
QueryConstructor: 
	QuerySelectClause   
	QueryGroupClause   
	QueryAccumulateClause   
QueryFromClause: 
	from  Identifier  in  ConditionalExpression   
QueryLetClause: 
	let  Identifier  =  ConditionalExpression   
QueryJoinClause: 
	join  Identifier  in  Expression  on  Expression  equals  ConditionalExpression   
QueryWhereClause: 
	where  ConditionalExpression   
QuerySelectClause: 
	select  ConditionalExpression   
QueryGroupClause: 
	group  Expression  by  ConditionalExpression   
QueryAccumulateClause: 
	QueryLetClause  accumulate  ConditionalExpression   
WhereExpression: 
	QueryExpression   
	QueryExpression  where  WhereExpressions   
WhereExpressions: 
	WhereExpression   
	WhereExpressions  ,  WhereExpression   
SelectExpression: 
	WhereExpression   
	WhereExpression  select  Expression   
InclusiveOrExpression: 
	ExclusiveOrExpression   
	InclusiveOrExpression  |  ExclusiveOrExpression   
ExclusiveOrExpression: 
	AndExpression   
	ExclusiveOrExpression  ^  AndExpression   
AndExpression: 
	SelectExpression   
	AndExpression  &  SelectExpression 
Expression: 
InclusiveOrExpression   

// 10.
CompilationUnit: 
	ModuleDeclarationList 
ModuleDeclarationList: 
	ModuleDeclaration 
	ModuleDeclarationList ModuleDeclaration 
ModuleDeclaration: 
	module QualifiedIdentifier ModuleBody  ;.opt  // LAMESPEC: mistyped as QualifiedIdentifer
QualifiedIdentifier: 
	Identifier 
	QualifiedIdentifier . Identifier  
ModuleBody: 
	{  ImportDirectives  ExportDirectives  ModuleMemberDeclarations  }   
ModuleMemberDeclarations: 
	empty 
	ModuleMemberDeclarations ModuleMemberDeclaration 
ModuleMemberDeclaration: 
	LanguageDeclaration 
	FieldDeclaration   
	ComputedValueDeclaration   
	TypeDeclaration  
ExportDirectives: 
	empty 
	ExportDirectives ExportDirective 
ExportDirective: 
	export Identifiers; 
ImportDirectives: 
	empty 
	ImportDirectives ImportDirective 
ImportDirective: 
	import  ImportModules  ;   
	import  QualifiedIdentifier  {  ImportMembers  }  ;   
ImportMember: 
	Identifier  ImportAlias.opt   
ImportMembers: 
	ImportMember   
	ImportMembers  ,  ImportMember   
ImportModule: 
	QualifiedIdentifier  ImportAlias.opt   
ImportModules: 
	ImportModule   
	ImportModules  ,  ImportModule   
ImportAlias: 
	as  Identifier 

// 11.
Attributes: // LAMESPEC: while referenced often, there is no definition for Attributes
	AttributeSections
AttributeSections: 
	AttributeSection 
	AttributeSections AttributeSection 
AttributeSection: 
	@{  Nodes  } 
